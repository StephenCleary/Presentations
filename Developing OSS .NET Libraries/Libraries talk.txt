https://github.com/Microsoft/microsoft-pdb
https://github.com/dotnet/corefx/blob/master/src/System.Reflection.Metadata/specs/PortablePdb-Metadata.md

https://github.com/ctaggart/SourceLink

Me:
- Boost.org: Type Traits (Feb 2000), Pool (Mar 2001).
- Occasional C++ & Python OSS (never used).
- Also JavaScript (updated Porter algorithm, further refined and extended to old english words) - used in commercial product (as Pascal).
- Most of last decade: .NET (C#), with some JavaScript (Py's iter_tools / C++ algorithms for ES6 generators).

Old-school xplat:
https://portablelibraryprofiles.stephencleary.com/
https://pcltargets.stephencleary.com/

Netstandard and .NET Core

Versioning:
- netstandard
- .NET Core
- VS tooling (for both netstandard & .NET Core)

.NET Core 2.0 tooling preview now available.

Tools and Tips:
- Picture of family.
- https://dotnetcorelibs.stephencleary.com/ (using shields.io for badges)
- Rx is your example. They support a non-trival number of platforms with a non-trivial library. When in doubt, do it their way.
- Components of a release: binaries, XML documentation, and pdbs.
  - What is a PDB?
  - PDBs are changing. Full, portable, embedded portable.
- Source control: GitHub (alt: BitBucket)
  - Git won. CVS -> SVN (SourceForge) -> Hg (CodePlex) -> Git (GH).
- Release versioning: manual (alt: Nerdbank.GitVersioning, GitVersionTask)
- Distribution: NuGet (alt: Paket)
  - NuGet is first with new TFM logic (because they *define* the TFM relationships)
  - MyGet for private builds
- CI builds: AppVeyor (alt: TravisCI, TeamCity, Jenkins, etc)
  - AppVeyor is aggressive in adopting new MS tech (.NET 4.6, .NET Core tooling, NuGet updates).
  - I have new builds on every checkin, with automatic distribution on Git tags.
  - Ensure keys are encrypted in OSS.
- Code Coverage: OpenCover (alt: JB dotCover)
  - OpenCover requires full pdbs and a special flag; dotCover supports portable pdbs.
- Code Coverage results: Coveralls (most CC tools do not support .NET - good opportunity here)
  - Line coverage - not branch coverage.
  - Current limitations: requires full pdb.
  - Nice: source code view.
- XML documentation
  - Lights up IntelliSense (and advanced docs with Re#)
  - Enable XML docs (Debug and Release) + All Warnings as Errors
- Debugging support
  - Current: SymbolSource. Pass "symbols" flag to your "dotnet pack" and everything else is automatic: pdbs and source files go into a .symbols.nupkg and are uploaded to SymbolSource when your .nupkg is uploaded to nuget.
  - Future: Source linking. Separate build step for now (can be in csproj, or possibly command line).
    - SourceLink: Supports newer portable pdbs with source linking.
      - GitLink / PdbGit: Supports older pdbs with SRCSRV HTTP links.
  - Future: Portable PDBs. Possibly embedded, possibly side-by-side in same nupkg, possibly in separate symbols nupkg (but probably not).
- Action items for Microsoft: (we .NET OSS library authors *want* .NET to succeed!)
  - Develop *open* tooling for defining platform-specific APIs at build time.
    - Historical: closed tooling (e.g., for creating PCL metadata assemblies).
    - Rule of thumb: if your library devs need a tool, so do we library devs!
  - Allow stepping into async methods in Release-built assemblies.
    - If you can't step into async methods, then stepping into methods is broken.
    - Async-first world! If it's broken for async, then it's broken period.
  - Make debugging libraries easier for consumers.
    - SymbolSource instructions: https://www.symbolsource.org/Public/Wiki/Using
    - OOBE should literally be "uncheck Just My Code" - everything else should default to allow SymbolSource and source linking.
