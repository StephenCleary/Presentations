- Define "background service": some piece of code that runs on the backend - the backend of the backend.
  - Common examples: queue processor, scheduled job
  - Non-examples: Azure Function / AWS Lambda / Google Cloud Function
    - These provide their own host, so to speak.
  - Non-examples: Mobile/UWP "background jobs"
    - iOS Background Tasks / Android Task Scheduling / UWP Background Tasks
- Hosting: worker service, .NET host, and process host.
- Hosting: .NET host and process host
  - Console application (Docker)
    - Windows containers (pre-6.0): https://stackoverflow.com/questions/60517716/can-a-net-core-application-on-windows-trap-a-sigterm-event
  - Win32 service
    - Reliability flag: https://blog.stephencleary.com/2020/06/servicebase-gotcha-recovery-actions.html
    - Working directory is not where your exe/dll is. https://blog.stephencleary.com/2009/10/managed-windows-services-basics.html
    - No redirected network drives; use UNC paths instead. https://blog.stephencleary.com/2009/10/windows-services-and-network.html
  - systemd service
    - Don't use default working directory! https://github.com/dotnet/runtime/issues/113855
  - Within another application:
    - ASP.NET application
    - UI applications: https://github.com/StephenCleary/Hosting (currently only WPF, not WinForms)
* Demo: Basic app running as Win32 service, systemd service, Console in docker.
  (Taking shortcuts for the demo; normally you'd dotnet-publish and then copy those files in, set the entrypoint, and build the image)
* Demo: Adding background worker to existing ASP.NET app.
- Worker interaction with the .NET Host
  - (all the gotchas from my blog)
  - Host lifetime: https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html
  - Synchronous starts: https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-startup.html
    - Most common: synchronously reading from a queue (looking at you, RabbitMQ) as the first real work in a worker.
  - Silent failures (pre-6.0): https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-silent-failure.html
- Distributed considerations
  - Allow graceful shutdowns (including rolling upgrades): no in-memory queues!
    - Yes, the popular MS example code is completely unsuitable for production! https://learn.microsoft.com/en-us/dotnet/core/extensions/queue-service
  - Allow multiple processes: use leases as necessary.
- Useful patterns
  - CriticalServiceBase
  - Logging JSON one line per log message (host-wide; may not be appropriate for ASP.NET)
  - Logging scopes
    - Exception logging scopes https://github.com/StephenCleary/Logging
  - Dependency Injection scope https://learn.microsoft.com/en-us/dotnet/core/extensions/scoped-service
  - Leases for scheduled "singleton" services that are actually distributed (CosmosDB and maybe Redis implementation) https://gist.github.com/StephenCleary/9777f2dcb9834a05efb261cc36839b3c
  - Queue consumer example (local RabbitMQ / Azure Queue)
  - Scheduled job example
