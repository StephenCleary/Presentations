Unit testing asynchronous code
- How async code works
  - The wild passing failing unit test! Why does this test pass?
- Use async Task, not async void
  - "async" doesn't exist at compile time.
  - Unit test framework support for async Task methods. TODO: Xamarin yet?
- Mocks, stubs, fakes, whatevers.
  - Basic idea of an asynchronous mock.
  - Default mock behavior for async methods (Moq gets this right; do any others? JustMock? Fakes?)
- Testing failure conditions
  - Assert.ThrowsAsync
- Advanced: Testing any kind of asynchronous code with TaskCompletionSource (?)
- Advanced: Testing with various UI thread contexts - WinForms, WPF, Windows Store, generic.

Asynchronous code is awesome, but it presents some unique difficulties for unit testing. Come to this session to learn practical techniques for unit testing code using async/await.

You'll first learn how to conceptually model async/await, which helps you avoid the most common async problems. Moving on, this talk covers the current state of async unit testing in various frameworks and libraries; and tips on how to properly mock/stub asynchronous code.

By the end of this session, you will have a full grasp of how to unit test asynchronous code, and you'll have an arsenal of techniques to address even the most complex scenarios.

Async Brownfield Development
- APIs should be async or sync, not both (as a general rule).
  - What is a "naturally asynchronous operation"?
- Asynchronous replacements for synchronous operations.
- Gradual conversion with ambisynchronous (cosynchronous too close to coroutines/coordinated, bisynchronous lit means two syncrhonous) APIs:
  - Duplicate logic.
  - Sync over async: various approaches and their drawbacks.
- Grow up. Lowest-level first.

Writing asynchronous code is not too hard when backwards compatibility is not a concern. This session teaches you how to apply asynchronous code to an existing codebase, which brings its own unique challenges.

In this session, learn how to tell which operations are naturally asynchronous, and the best approaches for introducing async/await to a synchronous system. This talk will cover how to create a vertical partition of async code within an application, even if the existing app doesn't have the best design. We'll also cover a variety of approaches for mixing synchronous and asynchronous code, and discuss the advantages and drawbacks of each approach.

You'll walk away with an understanding of how to get async's foot in the door of your system, and how to expand it gradually through your codebase while keeping backwards compatibility throughout.



All About Async

Confused by async? Relax, you're not alone. Async and await are useful and powerful, but they do have a bit of a learning curve.

This session starts with an introduction to async and await. It covers what the keywords mean and - just as importantly - what they *don't* mean. This talk does not cover every detail of what the compiler does; instead, it focuses on What You Need To Know. You will be empowered with appropriate conceptual models of async/await rather than drowning in minutiae.

The second part of this session deals with best practices and techniques for integrating newer async/await code with existing legacy systems. This part builds on the conceptual models of the first part, and considers differences in hosting environments (e.g., ASP.NET vs Windows Store) and libraries.

Participants are encouraged to write async code right from the very beginning, and will practice converting synchronous code to async/await. Feel free to bring your own project and questions!

You should bring a laptop with Visual Studio 2013 or 2012 installed (the Express edition is fine).



Intro to Async

Confused by async? Relax, you're not alone. Async and await are useful and powerful, but they do have a bit of a learning curve.

This session is an introduction to async and await. It covers what the keywords mean and - just as importantly - what they *don't* mean. This talk does not cover every detail of code transformation; instead, it focuses on What You Need To Know. You will be empowered with appropriate conceptual models of async/await rather than drowning in minutiae.

Once the basics are covered, we'll also deal with best practices and techniques for writing asynchronous code, pointing out common pitfalls along the way.

Note: this session is an introduction to async/await for both C# *and* JavaScript.